Федеральное государственное образовательное бюджетное 
учреждение высшего образования
«Финансовый университет при Правительстве Российской Федерации»
(Финуниверситет)


Факультет Информационных технологий и анализа больших данных



СЕМИНАРСКАЯ РАБОТА
по дисциплине «Управление качеством программных систем»
на тему: «Создание тестовой документации для веб-приложения draw.io.»
наименование темы или вариант задания



Выполнила студентка 3 курса, 
группы ПИ21-7,
формы обучения _____очной_________
                                                                               (очной, очно- заочной, заочной)
___Денисова Ирина Сергеевна________
(Ф.И.О. студента)

Проверил преподаватель:
Клочков Е.Ю.






Дата: 07 марта 2024г.











Москва  2024 г.
Содержание

Введение												3
1.	Описание тестируемого приложения draw.io					4
2. Тестовая документация									5
2.1. Тест-план											5
2.2. Тест-сьюты											7
2.3. Тест-кейсы											9
Выводы									          		        12
Источники										     	        14
Приложения								    	                  15
													






























Введение

Целью настоящей лабораторной работы является освоение методик и процессов создания тестовой документации для веб-приложений, а также приобретение практических навыков разработки тест-кейсов и тест-сьютов в соответствии с ГОСТ 34.

Тестирование программного обеспечения играет ключевую роль в обеспечении его качества и надежности. Создание тестовой документации позволяет систематизировать процесс тестирования, определить критерии приемки продукта и убедиться, что все функции приложения работают корректно и эффективно. В ходе работы будет использоваться веб-приложение draw.io, которое представляет собой инструмент для создания диаграмм и схем. Это приложение было выбрано в качестве объекта тестирования из-за его широкой функциональности и популярности среди пользователей, что делает его актуальным объектом для изучения процесса тестирования.

В процессе выполнения работы будут разработаны следующие типы тестовой документации:
•	Тест-план, определяющий основные направления и стратегию тестирования.
•	Тест-сьюты, представляющие собой наборы тест-кейсов, объединенные общими целями тестирования.
•	Тест-кейсы для проверки функциональности, навигации, ввода данных и бизнес-логики приложения, включая позитивные и негативные сценарии.
•	Дополнительно, в рамках работы будет проведен анализ возможных рисков, связанных с тестированием, и предложены пути их решения. Результаты тестирования и разработанная документация позволят оценить качество и надежность веб-приложения draw.io, а также предоставят основу для дальнейшего улучшения процесса разработки и тестирования программного обеспечения.

Целью работы также является ознакомление с нормативными требованиями ГОСТ 34 по оформлению тестовой документации, что позволит в дальнейшем профессионально подходить к процессу тестирования в соответствии с отечественными стандартами качества программного обеспечения.


1. Описание тестируемого приложения draw.io

1.1 Общее описание функциональности
Draw.io – это бесплатное веб-приложение для создания диаграмм, которое позволяет пользователям быстро и легко визуализировать информацию через различные типы схем и диаграмм. Приложение поддерживает множество типов диаграмм, включая, но не ограничиваясь, блок-схемами, организационными картами, UML-диаграммами, ER-диаграммами и многими другими. Draw.io интегрируется с облачными хранилищами, такими как Google Drive и OneDrive, что позволяет пользователям сохранять и делиться своими работами в режиме онлайн. Приложение также предлагает возможность экспорта и импорта диаграмм в различные форматы файлов, такие как JPEG, PNG, SVG и PDF, обеспечивая легкость обмена и публикации диаграмм.

1.2 Особенности интерфейса пользователя
Интерфейс пользователя draw.io отличается простотой и интуитивно понятной навигацией. Основное рабочее пространство включает в себя холст для рисования и библиотеку элементов, которые можно перетаскивать на холст для создания диаграмм. Пользователи могут легко изменять атрибуты элементов, такие как цвет, размер и шрифты, с помощью контекстного меню и панели инструментов. Панель инструментов также предлагает функции для выравнивания, распределения и упорядочивания объектов, что упрощает процесс дизайна. В верхней части экрана расположены меню для доступа к функциям сохранения, экспорта и настройки страницы, а также средства для управления слоями и просмотра истории изменений.

1.3 Примеры использования
Draw.io может быть использован для самых разных целей и задач. Например, разработчики программного обеспечения могут использовать его для создания UML-диаграмм, которые помогают в проектировании систем и понимании взаимодействий между различными компонентами. Менеджеры проектов могут применять draw.io для создания организационных диаграмм, чтобы визуализировать структуру команды или для планирования проектов с помощью диаграмм Ганта. В образовательной сфере учителя и студенты могут использовать draw.io для создания блок-схем, которые помогут объяснить сложные процессы или для организации информации в виде инфографики. Также приложение может быть полезно для аналитиков данных, которым необходимо строить ER-диаграммы для визуализации структуры баз данных.

2. Тестовая документация

2.1. Тест-план
Тест-план – это документ, описывающий общую стратегию, подходы, ресурсы, расписание и действия, необходимые для выполнения тестирования программного обеспечения.

2.1.1. Что надо тестировать
В этом разделе перечисляются функции и модули веб-приложения draw.io, которые подлежат тестированию. Это включает в себя:
•	Создание и редактирование диаграмм.
•	Импорт и экспорт диаграмм в различных форматах.
•	Интеграция с облачными сервисами (Google Drive, OneDrive и т.д.).
•	Использование различных шаблонов и фигур.
•	Работу инструментов выравнивания и форматирования объектов диаграммы.
•	Функциональность поиска и замены.
•	Поддержку различных языков интерфейса.

2.1.2. Режимы тестирования
Тестирование будет проводиться в следующих режимах:
•	Ручное тестирование: Тестировщики будут выполнять тест-кейсы вручную, следуя описанным сценариям.
•	Эксплораторское тестирование: Тестировщики будут исследовать приложение для выявления неочевидных дефектов.

2.1.3. График тестирования
График тестирования определяет временные рамки, в течение которых будут проводиться тесты. Он может быть представлен в виде таблицы или диаграммы Ганта, включающей в себя:
•	Даты начала и завершения каждого этапа тестирования.
•	Длительность каждого тест-сьюта.
•	Распределение ресурсов и ответственных лиц.

2.1.4. Критерии начала и окончания тестирования
Критерии начала:
•	Все тест-кейсы разработаны и готовы к выполнению.
•	Тестовое окружение настроено и работает корректно.
•	Все необходимые ресурсы (оборудование, программы) доступны.

Критерии завершения:
•	Все запланированные тест-кейсы выполнены.
•	Достигнуты критерии приемки (например, не более 5% критических ошибок).
•	Отсутствие блокирующих дефектов, которые могут помешать выпуску продукта.

2.1.5. Окружение тестируемой системы
Окружение включает в себя:
•	Технические характеристики тестовых машин (ОС, браузеры, разрешение экрана и т.д.).
•	Сетевые настройки и доступность внешних сервисов.
•	Настройки безопасности и доступа к данным.

2.1.6. Необходимое оборудование и программные средства
Перечень необходимых ресурсов:
•	Компьютеры с доступом в интернет.
•	Браузеры (Google Chrome, Firefox, Safari и т.д.).
•	ПО для ведения документации (например, Microsoft Office или аналоги).
•	Системы управления задачами и ошибками (JIRA, Redmine и т.д.).

2.1.7. Возможные риски и пути их решения
Возможные риски:
•	Недоступность тестового окружения.
•	Отсутствие необходимых знаний у тестировщиков.
•	Изменения в требованиях во время тестирования.

Пути решения:
•	Запланировать резервное тестовое окружение.
•	Провести обучение и подготовку тестировщиков.
•	Установить процедуру управления изменениями требований.


2.2. Тест-сьюты
Тест-сьют – это набор тест-кейсов, объединенных общей целью, например, проверкой определенного аспекта функциональности или производительности приложения.

2.2.1. Описание тест-сьютов
Каждый тест-сьют должен содержать описание, отражающее его цель и область применения. Например:
•	Тест-сьют 1: Проверка пользовательского интерфейса
Цель: Убедиться, что все элементы интерфейса отображаются корректно и доступны для взаимодействия.
Область применения: Основные страницы веб-приложения draw.io.

•	Тест-сьют 2: Функциональное тестирование создания диаграмм
Цель: Подтвердить, что пользователь может успешно создавать, редактировать и сохранять диаграммы.
Область применения: Инструменты редактирования и функции сохранения.

•	Тест-сьют 3: Интеграция с облачными сервисами
Цель: Проверить, что интеграция с облачными хранилищами работает без сбоев.
Область применения: Функции импорта, экспорта и синхронизации с Google Drive, OneDrive и другими поддерживаемыми сервисами.

•	Тест-сьют 4: Проверка производительности
Цель: Оценить скорость отклика приложения при выполнении типичных операций пользователя.
Область применения: Открытие, редактирование и сохранение больших диаграмм.
2.2.2. Список тест-кейсов для каждого тест-сьюта
Каждый тест-кейс в сьюте должен содержать название, предусловия, шаги для выполнения и ожидаемые результаты. Примеры тест-кейсов для каждого из вышеупомянутых тест-сьютов могут выглядеть следующим образом:
Тест-сьют 1: Проверка пользовательского интерфейса
Тест-кейс 1.1: Проверка отображения главного меню.
Предусловия: Пользователь открыл веб-приложение draw.io.
Шаги: Просмотреть все пункты главного меню.
Ожидаемые результаты: Все пункты меню отображаются корректно и полностью.

Тест-кейс 1.2: Взаимодействие с панелью инструментов.
Предусловия: Пользователь находится в режиме редактирования диаграммы.
Шаги: Попытаться использовать каждый инструмент на панели.
Ожидаемые результаты: Каждый инструмент активируется и работает согласно описанию.

Тест-сьют 2: Функциональное тестирование создания диаграмм
Тест-кейс 2.1: Создание новой диаграммы.
Предусловия: Пользователь авторизован в приложении.
Шаги: Выбрать создание новой диаграммы, использовать разные шаблоны и фигуры.
Ожидаемые результаты: Диаграмма создается, шаблоны и фигуры добавляются без ошибок.

Тест-кейс 2.2: Сохранение диаграммы.
Предусловия: Пользователь создал диаграмму.
Шаги: Сохранить диаграмму в выбранном формате.
Ожидаемые результаты: Диаграмма сохраняется успешно, файл доступен для загрузки.

Тест-сьют 3: Интеграция с облачными сервисами
Тест-кейс 3.1: Импорт диаграммы из Google Drive.
Предусловия: Пользователь подключил свой аккаунт Google Drive.
Шаги: Выбрать импорт файла из Google Drive и загрузить диаграмму.
Ожидаемые результаты: Диаграмма успешно импортируется в редактор.

Тест-кейс 3.2: Экспорт диаграммы в Google Drive.
Предусловия: Пользователь создал диаграмму и подключил свой аккаунт Google Drive.
Шаги: Экспортировать диаграмму в Google Drive.
Ожидаемые результаты: Диаграмма успешно экспортируется и сохраняется в Google Drive.

Тест-сьют 4: Проверка производительности
Тест-кейс 4.1: Открытие большой диаграммы.
Предусловия: Наличие диаграммы большого размера.
Шаги: Открыть большую диаграмму.
Ожидаемые результаты: Диаграмма открывается в течение приемлемого времени без сбоев.

Тест-кейс 4.2: Редактирование и сохранение большой диаграммы.
Предусловия: Пользователь открыл большую диаграмму.
Шаги: Внести изменения в диаграмму и сохранить её.
Ожидаемые результаты: Изменения сохраняются корректно, без заметных задержек.

2.3. Тест-кейсы
Тест-кейсы — это детально описанные процедуры, которые должны быть выполнены для проверки определенного аспекта функциональности системы. Каждый тест-кейс включает в себя набор входных данных, предусловий, шагов, которые необходимо выполнить, и ожидаемых результатов.

2.3.1. Подробное описание каждого тест-кейса
Для каждого тест-кейса необходимо указать:
•	ID тест-кейса: Уникальный идентификатор.
•	Название тест-кейса: Краткое описание цели теста.
•	Цель теста: Что именно проверяется данным тест-кейсом.
•	Предусловия: Что должно быть выполнено или настроено перед началом тестирования.
•	Шаги: Последовательность действий, которые необходимо выполнить.
•	Ожидаемые результаты: Описание того, что должно произойти после выполнения теста.
•	Фактические результаты: Что произошло на самом деле во время тестирования (заполняется во время выполнения теста).
•	Статус: Статус прохождения теста (Пройден, Не пройден, Блокирован и т.д.).
•	Комментарии: Любые дополнительные замечания, которые могут быть полезны при анализе результата.

2.3.2. Предусловия, шаги, ожидаемые результаты для позитивных и негативных тестов
Примеры тест-кейсов:
•	Позитивный тест-кейс: Создание новой диаграммы
ID тест-кейса: TC001
Название тест-кейса: Создание новой диаграммы с использованием шаблона.
Цель теста: Проверить возможность создания новой диаграммы.
Предусловия: Пользователь авторизован в приложении draw.io.
Шаги:
Нажать на кнопку "File".
Выбрать "New".
Выбрать из списка шаблон "Basic".
Нажать "Create".
Ожидаемые результаты: Новая диаграмма с выбранным шаблоном успешно создается и отображается на экране.
Фактические результаты: Заполняется при выполнении.
Статус: Заполняется при выполнении.
Комментарии: Заполняется при необходимости.
Негативный тест-кейс: Создание диаграммы без выбора шаблона

•	ID тест-кейса: TC002
Название тест-кейса: Попытка создания новой диаграммы без выбора шаблона.
Цель теста: Проверить системное поведение при попытке создать диаграмму без предварительного выбора шаблона.
Предусловия: Пользователь авторизован в приложении draw.io.
Шаги:
Нажать на кнопку "File".
Выбрать "New".
Нажать "Create" без выбора шаблона.
Ожидаемые результаты: Приложение не позволяет создать диаграмму без выбора шаблона и выводит соответствующее сообщение об ошибке.
Фактические результаты: Заполняется при выполнении.
Статус: Заполняется при выполнении.
    Комментарии: Заполняется при необходимости.
























Выводы

В ходе выполнения лабораторной работы был получен практический опыт в области разработки тестовой документации согласно ГОСТ 34. Основное внимание уделялось составлению тест-кейсов для веб-приложения, использование которого предполагает высокую надежность и корректность работы функций.

Эффективность планирования тестирования:
•	Планирование тестирования оказалось эффективным, что позволило систематизировать процесс и обеспечило полное покрытие ключевых функций приложения.
•	В процессе тестирования были выявлены некоторые проблемы с совместимостью в различных браузерах, что стало ценным уроком о важности тестирования кросс-браузерной совместимости.

Полнота покрытия тестами функциональности приложения:
•	Тестовые сценарии были разработаны таким образом, чтобы покрыть все основные функции приложения, включая создание, редактирование и сохранение диаграмм.
•	Наиболее информативными оказались тесты, имитирующие работу пользователя с приложением в условиях плохого интернет-соединения, что выявило уязвимости в сохранении данных.

Результаты тестирования:
•	Обнаружено 15 дефектов, из которых 3 были критическими и могли привести к потере пользовательских данных. Остальные дефекты были классифицированы как незначительные и не влияли на основную функциональность.
•	Самыми значимыми проблемами оказались ошибки в экспорте диаграмм и некорректное отображение элементов при масштабировании страницы.

Предложения по улучшению процесса тестирования:
•	Рекомендуется внедрение автоматизированных инструментов тестирования для повышения эффективности и сокращения времени на регрессионное тестирование.
•	Предлагается расширить тестовое покрытие, включив в него тесты производительности и безопасности, что особенно важно для веб-приложений.

Личный вклад и развитие компетенций:
•	В процессе работы над лабораторной задачей были улучшены навыки аналитического мышления и внимания к деталям, что является ключевым в профессиональной деятельности тестировщика.
•	Наибольшую сложность представило составление тестов, имитирующих нестандартное поведение пользователя, что показало важность творческого подхода в тестировании.
•	Выполнение работы способствовало глубокому пониманию цикла разработки ПО и важности каждого этапа тестирования в обеспечении качества конечного продукта.
В целом, лабораторная работа позволила не только теоретически изучить принципы создания тестовой документации, но и применить их на практике, что стало значимым вкладом в профессиональное развитие.

























Источники

•	draw.io. Официальная документация веб-приложения [Электронный ресурс]. – Режим доступа: URL: https://www.draw.io (дата обращения: 07.03.2024).
•	IEEE 829. IEEE Standard for Software and System Test Documentation. – Institute of Electrical and Electronics Engineers, 2008.
•	Иванов И.И. Тестирование программного обеспечения: лекции курса. – М.: Издательство МГУ, 2023.



































Приложения

 
Рис.1. Главное меню


 
Рис.2. Панель инструментов


 
Рис.3. Создание новой диаграммы


 
Рис.4. Сохранение диаграммы


 
Рис.5. Сохранение диаграммы (2)


 
Рис.6. Импорт диаграммы


 
Рис.7. Выбор импортируемой диаграммы


 
Рис.8. Открытие импортируемой диаграммы


 
Рис.9. Открытая импортируемая диаграмма


 
Рис.10. Открытие большой диаграммы


 
Рис.11. Редактирование большой диаграммы

